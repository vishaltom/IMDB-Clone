[{"/Users/vishaltom/Documents/Exercises/IMDB/client/src/index.js":"1","/Users/vishaltom/Documents/Exercises/IMDB/client/src/reportWebVitals.js":"2","/Users/vishaltom/Documents/Exercises/IMDB/client/src/components/App.js":"3","/Users/vishaltom/Documents/Exercises/IMDB/client/src/components/Movies.js":"4","/Users/vishaltom/Documents/Exercises/IMDB/client/src/components/MovieList.js":"5","/Users/vishaltom/Documents/Exercises/IMDB/client/src/components/MovieCard.js":"6","/Users/vishaltom/Documents/Exercises/IMDB/client/src/components/MovieForm.js":"7","/Users/vishaltom/Documents/Exercises/IMDB/client/src/components/ProducerDropdown.js":"8","/Users/vishaltom/Documents/Exercises/IMDB/client/src/components/ActorDropdown.js":"9","/Users/vishaltom/Documents/Exercises/IMDB/client/src/components/ActorForm.js":"10","/Users/vishaltom/Documents/Exercises/IMDB/client/src/components/ProducerForm.js":"11"},{"size":511,"mtime":1609260491323,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1609173914596,"results":"14","hashOfConfig":"13"},{"size":142,"mtime":1609417902637,"results":"15","hashOfConfig":"13"},{"size":2330,"mtime":1609437613649,"results":"16","hashOfConfig":"13"},{"size":495,"mtime":1609417972283,"results":"17","hashOfConfig":"13"},{"size":1471,"mtime":1609418925323,"results":"18","hashOfConfig":"13"},{"size":8018,"mtime":1609432360168,"results":"19","hashOfConfig":"13"},{"size":902,"mtime":1609418609161,"results":"20","hashOfConfig":"13"},{"size":972,"mtime":1609418626200,"results":"21","hashOfConfig":"13"},{"size":3659,"mtime":1609429414118,"results":"22","hashOfConfig":"13"},{"size":3759,"mtime":1609438019258,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"16mmo5r",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/vishaltom/Documents/Exercises/IMDB/client/src/index.js",[],["51","52"],"/Users/vishaltom/Documents/Exercises/IMDB/client/src/reportWebVitals.js",[],"/Users/vishaltom/Documents/Exercises/IMDB/client/src/components/App.js",[],"/Users/vishaltom/Documents/Exercises/IMDB/client/src/components/Movies.js",["53"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieList from './MovieList';\nimport MovieForm from './MovieForm';\n\nfunction Movies() {\n  const [movies, setMovies] = useState([]);\n  const [movieFormVisibility, setMovieFormVisibility] = useState(false);\n  const [selectedMovieId, setSelectedMovieId] = useState('');\n  const [renderMovies, setRenderMovies] = useState(true);\n\n  useEffect(() => {\n    if (renderMovies) {\n      fetchMovies();\n      console.log(selectedMovieId);\n      setRenderMovies(false);\n    }\n  }, [renderMovies]);\n\n  const fetchMovies = async () => {\n    const response = await axios.get('http://localhost:8080/movies/all', {\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    });\n    const result = response.data.data;\n    setMovies(result);\n  };\n\n  function handleMovieFormVisibilityChange() {\n    setMovieFormVisibility(false);\n    setRenderMovies(true);\n  }\n  function handleSelectedMovieChange(movieId) {\n    setSelectedMovieId(movieId);\n    setMovieFormVisibility(true);\n    console.log('Movie ID Selected', movieId);\n  }\n\n  if (movies.length <= 0) {\n    return (\n      <div>\n        <h3 style={{ textAlign: 'center' }}>IMDB Clone</h3>\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => {\n            setMovieFormVisibility(true);\n          }}\n          disabled={movieFormVisibility}\n        >\n          + Add New Movie\n        </button>\n        <MovieForm\n          visibility={movieFormVisibility}\n          changeVisibility={handleMovieFormVisibilityChange}\n          movieId={selectedMovieId}\n        />\n      </div>\n    );\n  } else\n    return (\n      <div>\n        <h3 style={{ textAlign: 'center' }}>IMDB Clone</h3>\n        <MovieList\n          movies={movies}\n          selectedMovieId={handleSelectedMovieChange}\n        />\n        <button\n          className=\"btn btn-primary\"\n          onClick={() => {\n            setMovieFormVisibility(true);\n          }}\n          disabled={movieFormVisibility}\n        >\n          + Add New Movie\n        </button>\n        <MovieForm\n          visibility={movieFormVisibility}\n          changeVisibility={handleMovieFormVisibilityChange}\n          movieId={selectedMovieId}\n        />\n      </div>\n    );\n}\n\nexport default Movies;\n","/Users/vishaltom/Documents/Exercises/IMDB/client/src/components/MovieList.js",[],"/Users/vishaltom/Documents/Exercises/IMDB/client/src/components/MovieCard.js",[],"/Users/vishaltom/Documents/Exercises/IMDB/client/src/components/MovieForm.js",["54"],"import React, { useState, useEffect } from 'react';\nimport ActorDropdown from './ActorDropdown';\nimport ProducerDropdown from './ProducerDropdown';\nimport axios from 'axios';\nimport ProducerForm from './ProducerForm';\nimport ActorForm from './ActorForm';\n\nfunction MovieForm({ visibility, changeVisibility, movieId }) {\n  const [editMode, setEditMode] = useState(false);\n  const [movieName, setMovieName] = useState('');\n  const [yearOfRelease, setYearOfRelease] = useState('');\n  const [plot, setPlot] = useState('');\n  const [producer, setProducer] = useState('');\n  const [producerList, setProducerList] = useState([]);\n  const [producerFormVisibility, setProducerFormVisibility] = useState(false);\n  const [renderProducerDropdown, setRenderProducerDropdown] = useState(true);\n  const [actors, setActors] = useState([]);\n  const [actorList, setActorList] = useState([]);\n  const [actorformVisibility, setActorFormVisibility] = useState(false);\n  const [renderActorDropdown, setRenderActorDropdown] = useState(true);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [errorStatus, setErrorStatus] = useState(false);\n\n  useEffect(() => {\n    if (movieId) {\n      console.log(movieId);\n      setEditMode(true);\n      fetchMovieForId();\n    }\n    if (renderProducerDropdown) {\n      fetchProducerOptions();\n      setRenderProducerDropdown(false);\n    }\n    if (renderActorDropdown) {\n      fetchActorOptions();\n      setRenderActorDropdown(false);\n    }\n  }, [movieId, renderProducerDropdown, renderActorDropdown]);\n\n  const fetchMovieForId = async () => {\n    const response = await axios.get(\n      `http://localhost:8080/movies/id=${movieId}`,\n      {\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n    const result = response.data.data;\n    setMovieIdData(result);\n  };\n\n  function setMovieIdData(movie) {\n    setMovieName(movie[0].Name);\n    setYearOfRelease(movie[0].YearOfRelease);\n    setPlot(movie[0].Plot);\n    setProducer(movie[0].Producer);\n    setActors(movie[0].Actors);\n  }\n  function handleMovieNameChange(event) {\n    setMovieName(event.target.value);\n  }\n  function handleYearOfReleaseChange(event) {\n    setYearOfRelease(event.target.value);\n  }\n  function handlePlotChange(event) {\n    setPlot(event.target.value);\n  }\n  function handleProducerChange(producerId) {\n    setProducer(producerId);\n  }\n  function handleActorChange(idList) {\n    setActors(idList);\n  }\n  function handleActorFormVisibilityChange() {\n    setActorFormVisibility(false);\n    setRenderActorDropdown(true);\n  }\n  function handleProducerFormVisibilityChange() {\n    setProducerFormVisibility(false);\n    setRenderProducerDropdown(true);\n  }\n\n  const fetchProducerOptions = async () => {\n    const response = await axios.get(\n      'http://localhost:8080/producers/producerDropdown',\n      {\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n    setProducerList(response.data.data);\n  };\n\n  const fetchActorOptions = async () => {\n    const response = await axios.get(\n      'http://localhost:8080/actors/actorDropdown',\n      {\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n    setActorList(response.data.data);\n  };\n  function handleReset() {\n    setMovieName('');\n    setYearOfRelease('');\n    setPlot('');\n    setProducer('');\n    setActors([]);\n    setEditMode(false);\n    changeVisibility();\n    setErrorStatus(false);\n    setErrorMessage('');\n    setActorFormVisibility(false);\n    setProducerFormVisibility(false);\n  }\n  const updateMovieData = async () => {\n    const response = await axios.post(\n      `http://localhost:8080/movies/id=${movieId}`,\n      {\n        Name: movieName,\n        YearOfRelease: yearOfRelease,\n        Plot: plot,\n        Producer: producer,\n        Actors: actors,\n      }\n    );\n    console.log(response);\n    if (response.data.success) {\n      handleReset();\n    }\n  };\n  const insertMovieData = async () => {\n    const response = await axios.post('http://localhost:8080/movies/new', {\n      Name: movieName,\n      YearOfRelease: yearOfRelease,\n      Plot: plot,\n      Producer: producer,\n      Actors: actors,\n    });\n    console.log(response);\n    if (response.data.success) {\n      handleReset();\n    }\n  };\n  function validateForm() {\n    if (movieName.length <= 0) {\n      setErrorMessage('Please enter a Movie Name');\n      return true;\n    } else if (yearOfRelease.length <= 0) {\n      setErrorMessage('Please enter the year of release');\n      return true;\n    } else if (producer.length <= 0) {\n      setErrorMessage('Please select the producer');\n      return true;\n    } else if (actors.length <= 0) {\n      setErrorMessage('Please select the actors');\n      return true;\n    }\n    return false;\n  }\n  function submitMovieFormData() {\n    const error = validateForm();\n    setErrorStatus(error);\n    if (!errorStatus) editMode ? updateMovieData() : insertMovieData();\n  }\n  function handleClose() {\n    handleReset();\n    changeVisibility();\n  }\n  if (visibility) {\n    return (\n      <div className=\"form-group container\">\n        <div className=\"alert alert-danger\" hidden={!errorStatus}>\n          {errorMessage}\n        </div>\n        <div>\n          <label>Movie Name</label>\n          <input\n            className=\"form-control\"\n            type=\"text\"\n            value={movieName}\n            onChange={handleMovieNameChange}\n          ></input>\n        </div>\n        <div>\n          <label>Year Of Release</label>\n          <input\n            className=\"form-control\"\n            type=\"text\"\n            value={yearOfRelease}\n            onChange={handleYearOfReleaseChange}\n          ></input>{' '}\n        </div>\n        <div>\n          <label>Plot</label>\n          <input\n            className=\"form-control\"\n            type=\"text\"\n            value={plot}\n            onChange={handlePlotChange}\n          ></input>{' '}\n        </div>\n        <div>\n          <label>Producer</label>\n          <ProducerDropdown\n            className=\"form-group\"\n            producerChange={handleProducerChange}\n            producer={producer}\n            producers={producerList}\n          />\n          <div>\n            <button\n              className=\"btn btn-light spacing\"\n              onClick={() => {\n                setProducerFormVisibility(true);\n              }}\n              disabled={producerFormVisibility}\n            >\n              + Add New Producer\n            </button>\n            <ProducerForm\n              visibility={producerFormVisibility}\n              visibilityChange={handleProducerFormVisibilityChange}\n            />\n          </div>\n        </div>\n        <div>\n          <label>Actors</label>\n          <ActorDropdown\n            className=\"form-group\"\n            actorsChange={handleActorChange}\n            actors={actors}\n            actorList={actorList}\n          />\n          <div>\n            <button\n              className=\"btn btn-light spacing\"\n              onClick={() => {\n                setActorFormVisibility(true);\n              }}\n              disabled={actorformVisibility}\n            >\n              + Add New Actor\n            </button>\n            <ActorForm\n              visibility={actorformVisibility}\n              visibilityChange={handleActorFormVisibilityChange}\n            />\n          </div>\n        </div>\n        <div>\n          <button\n            className=\"btn btn-primary\"\n            onClick={submitMovieFormData}\n            disabled={actorformVisibility || producerFormVisibility}\n          >\n            {editMode ? 'Update Movie' : 'Add Movie'}\n          </button>\n          <button\n            className=\"btn btn-outline-danger\"\n            style={{ float: 'right' }}\n            onClick={handleClose}\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    );\n  }\n  return null;\n}\n\nexport default MovieForm;\n","/Users/vishaltom/Documents/Exercises/IMDB/client/src/components/ProducerDropdown.js",["55"],"import React, { useState, useEffect } from 'react';\n\nfunction ProducerDropdown({ producerChange, producer, producers }) {\n  const [producerOptions, setProducerOptions] = useState();\n  useEffect(() => {\n    if (producers.length > 0) fetchProducerOptions();\n  }, [producers]);\n\n  function fetchProducerOptions() {\n    const optionList = producers.map((option) => {\n      return (\n        <option value={option._id} key={option._id}>\n          {option.Name}\n        </option>\n      );\n    });\n    setProducerOptions(optionList);\n  }\n  function handleProducerSelect(event) {\n    producerChange(event.target.value);\n  }\n  return (\n    <select\n      name=\"producers\"\n      onChange={handleProducerSelect}\n      value={producer}\n      className=\"form-control\"\n    >\n      <option value=\"\" disabled>\n        Select\n      </option>\n      {producerOptions}\n    </select>\n  );\n}\n\nexport default ProducerDropdown;\n","/Users/vishaltom/Documents/Exercises/IMDB/client/src/components/ActorDropdown.js",["56"],"import React, { useState, useEffect } from 'react';\n\nfunction ActorDropdown({ actorsChange, actors, actorList }) {\n  const [actorOptions, setActorOptions] = useState();\n  useEffect(() => {\n    if (actorList.length > 0) fetchActorOptions();\n  }, [actorList]);\n\n  function fetchActorOptions() {\n    const optionList = actorList.map((option) => {\n      return (\n        <option value={option._id} key={option._id}>\n          {option.Name}\n        </option>\n      );\n    });\n    setActorOptions(optionList);\n  }\n\n  function handleActorSelect(event) {\n    const actorList = Array.from(\n      event.target.selectedOptions,\n      (item) => item.value\n    );\n    actorsChange(actorList);\n  }\n  return (\n    <select\n      name=\"actors\"\n      multiple\n      onChange={handleActorSelect}\n      value={actors}\n      className=\"form-control\"\n    >\n      <option value=\"\" disabled>\n        Select\n      </option>\n      {actorOptions}\n    </select>\n  );\n}\n\nexport default ActorDropdown;\n","/Users/vishaltom/Documents/Exercises/IMDB/client/src/components/ActorForm.js",[],"/Users/vishaltom/Documents/Exercises/IMDB/client/src/components/ProducerForm.js",["57"],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":18,"column":6,"nodeType":"64","endLine":18,"endColumn":20,"suggestions":"65"},{"ruleId":"62","severity":1,"message":"66","line":38,"column":6,"nodeType":"64","endLine":38,"endColumn":60,"suggestions":"67"},{"ruleId":"62","severity":1,"message":"68","line":7,"column":6,"nodeType":"64","endLine":7,"endColumn":17,"suggestions":"69"},{"ruleId":"62","severity":1,"message":"70","line":7,"column":6,"nodeType":"64","endLine":7,"endColumn":17,"suggestions":"71"},{"ruleId":"72","severity":1,"message":"73","line":1,"column":27,"nodeType":"74","messageId":"75","endLine":1,"endColumn":36},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'selectedMovieId'. Either include it or remove the dependency array.","ArrayExpression",["78"],"React Hook useEffect has a missing dependency: 'fetchMovieForId'. Either include it or remove the dependency array.",["79"],"React Hook useEffect has a missing dependency: 'fetchProducerOptions'. Either include it or remove the dependency array.",["80"],"React Hook useEffect has a missing dependency: 'fetchActorOptions'. Either include it or remove the dependency array.",["81"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},"Update the dependencies array to be: [renderMovies, selectedMovieId]",{"range":"90","text":"91"},"Update the dependencies array to be: [movieId, renderProducerDropdown, renderActorDropdown, fetchMovieForId]",{"range":"92","text":"93"},"Update the dependencies array to be: [fetchProducerOptions, producers]",{"range":"94","text":"95"},"Update the dependencies array to be: [actorList, fetchActorOptions]",{"range":"96","text":"97"},[554,568],"[renderMovies, selectedMovieId]",[1472,1526],"[movieId, renderProducerDropdown, renderActorDropdown, fetchMovieForId]",[261,272],"[fetchProducerOptions, producers]",[245,256],"[actorList, fetchActorOptions]"]